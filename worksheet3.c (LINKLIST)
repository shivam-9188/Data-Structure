#include <stdio.h>
#include <stdlib.h>

// Node structure
typedef struct node {
    int info;
    struct node *next;
} node;

// Linked list structure
typedef struct {
    node *first;
} list;

// Create a new list
list *createList() {
    list *l = (list *) malloc(sizeof(list));
    l->first = NULL;
    return l;
}

// Insert at the beginning
void insertAtBeginning(list *l, int value) {
    node *newNode = (node *) malloc(sizeof(node));
    newNode->info = value;
    newNode->next = l->first;
    l->first = newNode;
}

// Insert at the end
void insertAtEnd(list *l, int value) {
    node *newNode = (node *) malloc(sizeof(node));
    newNode->info = value;
    newNode->next = NULL;

    if (l->first == NULL) {
        l->first = newNode;
        return;
    }

    node *temp = l->first;
    while (temp->next != NULL) {
        temp = temp->next;
    }

    temp->next = newNode;
}

// Insert after a given value
void insertAfter(list *l, int prevValue, int value) {
    node *temp = l->first;
    while (temp != NULL && temp->info != prevValue) {
        temp = temp->next;
    }

    if (temp != NULL) {
        node *newNode = (node *) malloc(sizeof(node));
        newNode->info = value;
        newNode->next = temp->next;
        temp->next = newNode;
    } else {
        printf("\nValue %d not found in the list.\n", prevValue);
    }
}

// Delete a node
void deleteNode(list *l, int value) {
    node *temp = l->first, *prev = NULL;

    if (temp != NULL && temp->info == value) {
        l->first = temp->next;
        free(temp);
        return;
    }

    while (temp != NULL && temp->info != value) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("\nValue %d not found in the list.\n", value);
        return;
    }

    prev->next = temp->next;
    free(temp);
}

// Display the list
void displayList(list *l) {
    node *temp = l->first;
    printf("\nLinked list: ");
    while (temp != NULL) {
        printf("%d -> ", temp->info);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Main function
int main() {
    list *myList = createList();
    int value, prev, choice;

    do {
        printf("\n--- MENU ---\n");
        printf("1. Insert at start\n");
        printf("2. Insert at end\n");
        printf("3. Insert after a node\n");
        printf("4. Delete node\n");
        printf("5. Display list\n");
        printf("6. Exit\n");

        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value: ");
                scanf("%d", &value);
                insertAtBeginning(myList, value);
                break;

            case 2:
                printf("Enter value: ");
                scanf("%d", &value);
                insertAtEnd(myList, value);
                break;

            case 3:
                printf("Enter value to insert: ");
                scanf("%d", &value);
                printf("Enter previous value after which to insert: ");
                scanf("%d", &prev);
                insertAfter(myList, prev, value);
                break;

            case 4:
                printf("Enter value to delete: ");
                scanf("%d", &value);
                deleteNode(myList, value);
                break;

            case 5:
                displayList(myList);
                break;

            case 6:
                printf("Exiting program.\n");
                break;

            default:
                printf("Invalid choice! Try again.\n");
        }

    } while (choice != 6);

    // Free all nodes (optional clean-up)
    node *current = myList->first;
    while (current != NULL) {
        node *temp = current;
        current = current->next;
        free(temp);
    }
    free(myList);

    return 0;
}

